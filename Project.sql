CREATE DATABASE E_COMMERCE;
USE E_COMMERCE;

CREATE TABLE CUSTOMERS(
CUSTOMER_ID VARCHAR(300) PRIMARY KEY,
CUSTOMER_UNIQUE_ID VARCHAR(300),
CUSTOMER_ZIP INT,
CUSTOMER_CITY VARCHAR(200),
CUSTOMER_STATE VARCHAR(4)
);

CREATE TABLE ORDERS_ITENS(
ORDERS_ID VARCHAR(300),
ORDER_ITEM_ID INT,
PRODUCT_ID VARCHAR(300),
SELLER_ID VARCHAR(300),
SHIPPING_LIMIT_DATE DATETIME,
PRICE FLOAT,
FREIGHT_VALUES DECIMAL(4,2)
);


CREATE TABLE ORDER_PAYMENT(
ORDER_ID VARCHAR(300),
PAYMENT_SEQUENCIAL INT,
PAYMENT_TYPE VARCHAR(15),
PAYMENT_INSTALLMENTS INT,
PAYMENT_VALUES FLOAT
);

CREATE TABLE ORDERS_REVIEWS(
REVIEW_ID VARCHAR(300),
ORDER_ID VARCHAR(300),
REVIEW_SCORE INT,
REVIEW_COMENT_TITLE VARCHAR(400),
REVIEW_COMENT_MESSAGE VARCHAR(800),
REVIEW_CREATE_DATE DATETIME,
REVIEW_ANSWER_TIMESTAMP DATETIME
);


CREATE TABLE ORDERS(
ORDER_ID VARCHAR(300),
CUSTOMER_ID VARCHAR(300),
ORDER_STATUS VARCHAR(100),
ORDER_PUCHASE_TIMESTAMP DATETIME,
ORDER_APPROVED_AT DATETIME,
ORDER_DELIVERED_CARRIER_DATE DATETIME,
ORDER_ESTIMATED_DELIVERY_DATE DATETIME
);


CREATE TABLE PRODUCTS(
PRODUCT_ID VARCHAR(300),
PRODUCT_CATEGORY_NAME VARCHAR(200),
PRODUCT_NAME_LENGHT INT,
PRODUCT_DESCRRIPTION_LENGHT INT,
PRODUCT_PHOTOS_QTY INT,
PRODUCT_WEIGHT_G INT,
PRODUCT_LENGTH_CM INT,
PRODUCT_HEIGHT_CM INT,
PRODUCT_WIDTH_CM INT
);


CREATE TABLE SELLER(
SELLER_ID VARCHAR(300),
SELLER_ZIP_CODE INT,
SELLER_CITY VARCHAR(200),
SELLER_STATE VARCHAR(3)
);

LOAD DATA INFILE 'C:/ecommerce_br/olist_customers_dataset.csv'
INTO TABLE CUSTOMERS
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS; 

LOAD DATA INFILE 'C:/ecommerce_br/olist_order_items_dataset.csv'
INTO TABLE ORDERS_ITENS
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS; 

LOAD DATA INFILE 'C:/ecommerce_br/olist_order_payments_dataset.csv'
INTO TABLE ORDER_PAYMENT
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS; 

LOAD DATA INFILE 'C:/ecommerce_br/olist_order_reviews_dataset.csv'
INTO TABLE ORDERS_REVIEWS
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA INFILE 'C:/ecommerce_br/olist_orders_dataset.csv'
INTO TABLE ORDERS
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA INFILE 'C:/ecommerce_br/olist_products_dataset.csv'
INTO TABLE PRODUCTS
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

LOAD DATA INFILE 'C:/ecommerce_br/olist_sellers_dataset.csv'
INTO TABLE SELLER
FIELDS TERMINATED BY ',' 
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
IGNORE 1 ROWS;

SELECT * FROM SELLER;
SELECT * FROM PRODUCTS;
SELECT * FROM ORDERS;
SELECT * FROM ORDERS_REVIEWS;
SELECT * FROM ORDER_PAYMENT;
SELECT * FROM ORDERS_ITENS;
SELECT * FROM CUSTOMERS;

SELECT SELLER_CITY, SELLER_STATE, COUNT(*) AS SELLER_FOR_CITY FROM SELLER GROUP BY SELLER_CITY;

SELECT PRODUCT_CATEGORY_NAME, COUNT(*) AS TOTAL_PRODUCT FROM PRODUCTS GROUP BY PRODUCT_CATEGORY_NAME;

SELECT ORDER_ID, ORDER_DELIVERED_CARRIER_DATE FROM ORDERS WHERE ORDER_STATUS = 'delivered' AND ORDER_DELIVERED_CARRIER_DATE LIKE '%2018%';

SELECT * FROM ORDERS_REVIEWS  WHERE REVIEW_SCORE >= 3 AND REVIEW_COMENT_MESSAGE IS NOT NULL;

SELECT PAYMENT_TYPE, AVG(PAYMENT_VALUES) AS VALUE_AVG, MIN(PAYMENT_VALUES) AS VALUE_MIN, MAX(PAYMENT_VALUES) AS VALUE_MAX FROM ORDER_PAYMENT  GROUP BY PAYMENT_TYPE;

SELECT ORDERS_ID, PRICE, FREIGHT_VALUES FROM ORDERS_ITENS WHERE PRICE >= 100 OR FREIGHT_VALUES > 30;

SELECT * FROM CUSTOMERS WHERE CUSTOMER_ZIP IS NOT NULL AND CUSTOMER_CITY IS NOT NULL GROUP BY CUSTOMER_STATE;

SELECT O.order_id, R.review_score
FROM ORDERS_REVIEWS R
JOIN ORDERS O ON R.order_id = O.order_id
WHERE R.review_score < 3;

SELECT O.ORDERS_ID, P.PRODUCT_CATEGORY_NAME
FROM ORDERS_ITENS O
JOIN PRODUCTS P ON O.PRODUCT_ID = P.PRODUCT_ID
WHERE PRODUCT_CATEGORY_NAME IS NOT NULL;

SELECT * FROM SELLER;
SELECT * FROM PRODUCTS;
SELECT * FROM ORDERS;
SELECT * FROM ORDERS_REVIEWS;
SELECT * FROM ORDER_PAYMENT;
SELECT * FROM ORDERS_ITENS;
SELECT * FROM CUSTOMERS;

CREATE INDEX SELLER_STATE ON SELLER (SELLER_STATE);
CREATE INDEX N_PRODUCT ON PRODUCTS (PRODUCT_CATEGORY_NAME);
CREATE INDEX PUCHASE ON ORDERS (ORDER_PUCHASE_TIMESTAMP);
CREATE INDEX SCORE ON ORDERS_REVIEWS (REVIEW_SCORE);
CREATE INDEX PAYMENT ON ORDER_PAYMENT (PAYMENT_VALUES);
CREATE INDEX P_ID ON ORDERS_ITENS (PRODUCT_ID);
CREATE INDEX S_ID ON ORDERS_ITENS (SELLER_ID);
CREATE INDEX O_ID ON ORDERS_ITENS (ORDERS_ID);

SELECT SELLER_ID, SELLER_CITY FROM SELLER GROUP BY SELLER_STATE;

SELECT O.ORDERS_ID, O.SELLER_ID,O.PRODUCT_ID, R.REVIEW_COMENT_TITLE, R.REVIEW_COMENT_MESSAGE,
CASE
	WHEN R.REVIEW_SCORE = 5 THEN 'Excelent'
    WHEN R.REVIEW_SCORE = 4 THEN 'Very good'
    WHEN R.REVIEW_SCORE = 3 THEN 'Good'
    WHEN R.REVIEW_SCORE = 2 THEN 'Bad'
    ELSE 'Very bad'
END AS SCORE_REVIEWS
FROM ORDERS_REVIEWS R
JOIN ORDERS_ITENS O ON R.ORDER_ID = O.ORDERS_ID
WHERE O.ORDERS_ID IS NOT NULL;

SELECT PRODUCT_CATEGORY_NAME, COUNT(*) FROM PRODUCTS GROUP BY PRODUCT_CATEGORY_NAME
HAVING COUNT(*) > 900;

DELIMITER //
CREATE PROCEDURE RELATORIO_ORDERS_DELIV()
BEGIN
	SELECT 
		O.ORDER_ID,
        O.CUSTOMER_ID,
        C.CUSTOMER_CITY,
        C.CUSTOMER_STATE,
        O.ORDER_APPROVED_AT,
        O.ORDER_DELIVERED_CARRIER_DATE,
        O.ORDER_ESTIMATED_DELIVERY_DATE,
        R.REVIEW_COMENT_TITLE,
        R.REVIEW_COMENT_MESSAGE
    FROM ORDERS O
    INNER JOIN CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID
    INNER JOIN ORDERS_REVIEWS R ON O.ORDER_ID = R.ORDER_ID
    WHERE O.ORDER_APPROVED_AT IS NOT NULL;
END;
//
DELIMITER ;

CALL RELATORIO_ORDERS_DELIV();

SELECT
	COUNT(*)
FROM ORDERS O
INNER JOIN CUSTOMERS C ON O.CUSTOMER_ID = C.CUSTOMER_ID
INNER JOIN ORDERS_REVIEWS R ON O.ORDER_ID = R.ORDER_ID;

CREATE INDEX ID_C ON CUSTOMERS(CUSTOMER_ID);
CREATE INDEX ID_O ON ORDERS_REVIEWS(ORDER_ID);

ANALYZE TABLE ORDERS;
ANALYZE TABLE CUSTOMERS;
ANALYZE TABLE ORDERS_REVIEWS;

CALL RELATORIO_ORDERS_DELIV();

SELECT 
    TABLE_NAME AS 'Tables',
    ROUND((DATA_LENGTH + INDEX_LENGTH) / 1024 / 1024, 2) AS `MB`
FROM 
    INFORMATION_SCHEMA.TABLES
WHERE 
    TABLE_SCHEMA = 'E_COMMERCE';
    
    
CREATE TABLE IF NOT EXISTS CUSTOMERS_BKP LIKE CUSTOMERS;
CREATE TABLE IF NOT EXISTS ORDERS_BKP LIKE ORDERS;
CREATE TABLE IF NOT EXISTS ORDERS_ITENS_BKP LIKE ORDERS_ITENS;
CREATE TABLE IF NOT EXISTS ORDER_PAYMENT_BKP LIKE ORDER_PAYMENT;
CREATE TABLE IF NOT EXISTS ORDERS_REVIEWS_BKP LIKE ORDERS_REVIEWS;
CREATE TABLE IF NOT EXISTS PRODUCTS_BKP LIKE PRODUCTS;
CREATE TABLE IF NOT EXISTS SELLER_BKP LIKE SELLER;

SHOW COLUMNS FROM CUSTOMERS;
SHOW COLUMNS FROM ORDERS;
SHOW COLUMNS FROM ORDER_PAYMENT;
SHOW COLUMNS FROM ORDERS_ITENS;
SHOW COLUMNS FROM ORDERS_REVIEWS;
SHOW COLUMNS FROM PRODUCTS;

DELIMITER //
CREATE TRIGGER before_delete_customers
BEFORE DELETE ON CUSTOMERS
FOR EACH ROW
BEGIN
    -- Inserir os dados deletados na tabela de backup
    INSERT INTO CUSTOMERS_BKP SELECT * FROM CUSTOMERS WHERE CUSTOMER_ID = OLD.CUSTOMER_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_delete_orders
BEFORE DELETE ON ORDERS
FOR EACH ROW
BEGIN
    INSERT INTO ORDERS_BKP SELECT * FROM ORDERS WHERE ORDER_ID = OLD.ORDER_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_delete_order_payment
BEFORE DELETE ON ORDER_PAYMENT
FOR EACH ROW
BEGIN
    INSERT INTO ORDERS_PAYMENT_BKP SELECT * FROM ORDER_PAYMENT WHERE ORDER_ID = OLD.ORDER_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_delete_orders_itens
BEFORE DELETE ON ORDERS_ITENS
FOR EACH ROW
BEGIN
    INSERT INTO ORDERS_ITENS_BKP SELECT * FROM ORDERS_ITENS WHERE ORDERS_ID = OLD.ORDERS_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_delete_order_reviews
BEFORE DELETE ON ORDERS_REVIEWS
FOR EACH ROW
BEGIN
    INSERT INTO ORDERS_REVIEWS_BKP SELECT * FROM ORDER_REVIEWS WHERE REVIEW_ID = OLD.REVIEW_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_delete_products
BEFORE DELETE ON PRODUCTS
FOR EACH ROW
BEGIN
    INSERT INTO PRODUCTS_BKP SELECT * FROM PRODUCTS WHERE PRODUCT_ID = OLD.PRODUCT_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER before_delete_seller
BEFORE DELETE ON SELLER
FOR EACH ROW
BEGIN
    INSERT INTO SELLER_BKP SELECT * FROM SELLER WHERE SELLER_ID = OLD.SELLER_ID;
END;
//
DELIMITER ;

SELECT * FROM CUSTOMERS LIMIT 10;

DELETE FROM CUSTOMERS WHERE CUSTOMER_ID = "000161a058600d5901f007fab4c27140";

SELECT * FROM CUSTOMERS_BKP;